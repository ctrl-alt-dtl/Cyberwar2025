// Red Domain Links

// @TODO: THIS NEEDS TO BE REDONE.
// The stroke of the Konva exploit line is not easily accessible via console.
// Therefore I cannot dynamically change it's value like I can with the server points and their text.

app.directive('gameBoardR1R3ExploitLink', function () {
  return {
    restrict: 'A',
    link: function (scope) {
      // console.log("gameBoardRedR1R3ExploitLinkLoading");
      // linksGroup.add(r1r3Exploit);

      r1r3Exploit.on('mouseover', function () {
        document.body.style.cursor = 'pointer';

        var mousePos = stage.getPointerPosition();

        toolTipText.position({
          x: mousePos.x + 5,
          y: mousePos.y + 5,
        });
        toolTipRect.position({
          x: mousePos.x + 5,
          y: mousePos.y + 5,
        });

        if(toolTipText.text() !== ""){
          toolTipRect.show();
          toolTipText.show();
          toolTipLayer.batchDraw();
        }
      });
      r1r3Exploit.on('mouseout', function () {
        document.body.style.cursor = 'default';

        toolTipRect.hide();
        toolTipText.hide();
        toolTipLayer.draw();
      });

      r1r3Exploit.on ('click', function () {
        console.log("R1R3 Exploit");
      });
      exploitLinksGroup.add(r1r3Exploit);
    }
  }
});

app.directive('gameBoardR3R4ExploitLink', function () {
  return {
    restrict: 'A',
    link: function (scope) {
      // console.log("gameBoardRedR3R4ExploitLinkLoading");

      // add cursor styling
      r3r4Exploit.on('mouseover', function () {
        document.body.style.cursor = 'pointer';

        var mousePos = stage.getPointerPosition();

        toolTipText.position({
          x: mousePos.x + 5,
          y: mousePos.y + 5,
        });
        toolTipRect.position({
          x: mousePos.x + 5,
          y: mousePos.y + 5,
        });

        if(toolTipText.text() !== ""){
          toolTipRect.show();
          toolTipText.show();
          toolTipLayer.batchDraw();
        }

      });
      r3r4Exploit.on('mouseout', function () {
        document.body.style.cursor = 'default';

        toolTipRect.hide();
        toolTipText.hide();
        toolTipLayer.draw();
      });

      r3r4Exploit.on ('click', function () {
        console.log("R3R6 Exploit");

      });
      exploitLinksGroup.add(r3r4Exploit);
    }
  }
});

app.directive('gameBoardR3R6ExploitLink', function () {
  return {
    restrict: 'A',
    link: function (scope) {
      // console.log("gameBoardRedR3R6ExploitLinkLoading");

      // add cursor styling
      r3r6Exploit.on('mouseover', function () {
        document.body.style.cursor = 'pointer';

        var mousePos = stage.getPointerPosition();

        r3r6ToolTipText.position({
          x: mousePos.x + 5,
          y: mousePos.y + 5,
        });
        toolTipRect.position({
          x: mousePos.x + 5,
          y: mousePos.y + 5,
        });

        if(r3r6ToolTipText.text() !== ""){
          toolTipRect.show();
          r3r6ToolTipText.text("Test\nTest2");
          r3r6ToolTipText.show();
          toolTipLayer.batchDraw();
        }

      });
      r3r6Exploit.on('mouseout', function () {
        document.body.style.cursor = 'default';

        toolTipRect.hide();
        r3r6ToolTipText.hide();
        toolTipLayer.draw();
      });

      r3r6Exploit.on ('click', function () {
        console.log("R3R6 Exploit");
      });
      exploitLinksGroup.add(r3r6Exploit);
    }
  }
});
