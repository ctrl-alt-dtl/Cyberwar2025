angular.module('CyberWar')
.directive('exploitLink', function(GameState, GameUtil) {
  function link($scope, element, attrs) {
    var line, myExploitIcon, theirExploitIcon;

    GameState.addListener(onGameStateChanged);

    // ----------------------------------------------------------------------------
    $scope.$on('$destroy', function() {
      GameState.removeListener(onGameStateChanged);
      line.remove();
    });

    // ----------------------------------------------------------------------------
    function onGameStateChanged() {
      var currentPlayerHasExploitLink = doesCurrentPlayerHaveExploitLink();
      var otherPlayerHasExploitLink = doesOtherPlayerHasExploitLink();
      // Update the line's stroke color based on if there are any exploit links here or not
      line.stroke(currentPlayerHasExploitLink || otherPlayerHasExploitLink ? 'black' : noColor);
      if (myExploitIcon) {
        myExploitIcon.fill(GameUtil.getColor(GameState.currentPlayerData.color));
        myExploitIcon.visible(currentPlayerHasExploitLink);
      }
      if (theirExploitIcon) {
        theirExploitIcon.visible(otherPlayerHasExploitLink);
      }
    }

    // ----------------------------------------------------------------------------
    var createKonvaObjects = function(nodeA, nodeB) {
      // Get the positions of our endpoints
      var nodeAPosition = GameUtil.getHexPosition(nodeA.color, nodeA.index);
      var nodeBPosition = GameUtil.getHexPosition(nodeB.color, nodeB.index);

      // Special case positioning for links from a base
      if (nodeA.index == 0 && nodeB.index == 1) {
        nodeAPosition = { x: nodeAPosition.x1, y: nodeAPosition.y1 };
      }
      else if (nodeA.index == 0 && nodeB.index == 2) {
        nodeAPosition = { x: nodeAPosition.x2, y: nodeAPosition.y2 };
      }
      if (nodeA.index == 2 && nodeB.index == 0) {
        nodeBPosition = { x: nodeBPosition.x2, y: nodeBPosition.y2 };
      }
      else if (nodeA.index == 1 && nodeB.index == 0) {
        nodeBPosition = { x: nodeBPosition.x1, y: nodeBPosition.y1 };
      }

      // Create the Konva line
      line = new Konva.Line({
        points: [
          nodeAPosition.x,
          nodeAPosition.y,
          nodeBPosition.x,
          nodeBPosition.y
        ],
        stroke: 'black',
        strokeWidth: exploitLinksStroke,
        lineCap: 'square',
        lineJoin: 'square',
        dash: [
          exploitLineDashWidth,
          exploitLineDashGap
        ],
        visible: lineVisible,
        id: nodeA.color + nodeA.index + ' to ' + nodeB.color + nodeB.index + ' Exploit Link'
      });

      // How far down the exploit link line we want our two icons
      // The two fractions MUST add up to 1
      var myExploitIconFraction = 3 / 8;
      var otherExploitIconFraction = 5 / 8;

      // Create the icon for if the current player has an exploit link here
      var exploitImage = new Image();
      exploitImage.src = 'client/img/exploit-link.png';
      exploitImage.onload = function() {
        myExploitIcon = new Konva.Image({
          x: (nodeAPosition.x - 8) * myExploitIconFraction + (nodeBPosition.x - 8) * otherExploitIconFraction,
          y: (nodeAPosition.y - 8) * myExploitIconFraction + (nodeBPosition.y - 8) * otherExploitIconFraction,
          width: 16,
          height: 16,
          image: exploitImage,
          visible: doesCurrentPlayerHaveExploitLink(),
          listening: false
        });

        // Create the icon for if another player has an exploit link here
        theirExploitIcon = new Konva.Circle({
          x: nodeAPosition.x * otherExploitIconFraction + nodeBPosition.x * myExploitIconFraction,
          y: nodeAPosition.y * otherExploitIconFraction + nodeBPosition.y * myExploitIconFraction,
          radius: 6,
          fill: 'white',
          stroke: 'black',
          strokeWidth: 1,
          visible: doesCurrentPlayerHaveExploitLink(),
          listening: false
        });

        linksGroup.add(myExploitIcon, theirExploitIcon);
        linksGroup.draw();
      }

      linksGroup.add(line);

      line.on('mouseover', function () {
        document.body.style.cursor = 'pointer';
      });
      line.on('mouseout', function () {
        document.body.style.cursor = 'default';
      });
      line.on('click', function () {
        if ($scope.callbackFn) {
          $scope.$apply($scope.callbackFn({ nodeA: $scope.nodeA, nodeB: $scope.nodeB }));
        }
      });
    }

    // ----------------------------------------------------------------------------
    var doesCurrentPlayerHaveExploitLink = function() {
      return GameUtil.areLocationsLinked($scope.nodeA, $scope.nodeB, GameState.currentPlayerData.exploitLinks);
    }

    // ----------------------------------------------------------------------------
    var doesOtherPlayerHasExploitLink = function() {
      return GameUtil.areLocationsLinked($scope.nodeA, $scope.nodeB, GameState.currentPlayerData.scannedExploitLinks);
    }

    createKonvaObjects($scope.nodeA, $scope.nodeB);
    onGameStateChanged();
  }
  return {
    link: link,
    restrict: 'E',
    scope: {
      callbackFn: '&',
      nodeA: '=',
      nodeB: '='
    },
  }
});
