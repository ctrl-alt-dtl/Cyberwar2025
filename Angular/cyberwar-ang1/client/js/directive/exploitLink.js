angular.module('CyberWar')
.directive('exploitLink', function(GameState, GameUtil) {
  function link($scope, element, attrs) {
    var myExploitLine, theirExploitLine;

    GameState.addListener(onGameStateChanged);

    // ----------------------------------------------------------------------------
    $scope.$on('$destroy', function() {
      GameState.removeListener(onGameStateChanged);
      myExploitLine.remove();
      theirExploitLine.remove();
    });

    // ----------------------------------------------------------------------------
    function onGameStateChanged() {
      // Make sure our exploit link is our color
      myExploitLine.stroke(GameUtil.getColor(GameState.currentPlayerData.color));

      // Update our exploit links based on what we know
      myExploitLine.visible(doesCurrentPlayerHaveExploitLink());
      theirExploitLine.visible(doesOtherPlayerHasExploitLink());
    }

    // ----------------------------------------------------------------------------
    var createKonvaObjects = function(nodeA, nodeB) {
      // Get the positions of our endpoints
      var nodeAPosition = GameUtil.getHexPosition(nodeA.color, nodeA.index);
      var nodeBPosition = GameUtil.getHexPosition(nodeB.color, nodeB.index);

      // Special case positioning for links from a base
      if (nodeA.index == 0 && nodeB.index == 1) {
        nodeAPosition = { x: nodeAPosition.x1, y: nodeAPosition.y1 };
      }
      else if (nodeA.index == 0 && nodeB.index == 2) {
        nodeAPosition = { x: nodeAPosition.x2, y: nodeAPosition.y2 };
      }
      if (nodeA.index == 2 && nodeB.index == 0) {
        nodeBPosition = { x: nodeBPosition.x2, y: nodeBPosition.y2 };
      }
      else if (nodeA.index == 1 && nodeB.index == 0) {
        nodeBPosition = { x: nodeBPosition.x1, y: nodeBPosition.y1 };
      }

      // How far over our exploit links are
      var exploitLinkOffset = 12;

      // Find our perpendicular unit vector to our line
      var perpendicular = getPerpendicularVector(nodeAPosition.x, nodeBPosition.x, nodeAPosition.y, nodeBPosition.y, exploitLinkOffset);

      var group = new Konva.Group();

      // Create the Konva line
      myExploitLine = new Konva.Line({
        points: [
          nodeAPosition.x + perpendicular.x,
          nodeAPosition.y + perpendicular.y,
          nodeBPosition.x + perpendicular.x,
          nodeBPosition.y + perpendicular.y
        ],
        stroke: 'black',
        strokeWidth: exploitLinksStroke,
        lineCap: 'square',
        lineJoin: 'square',
        dash: [
          exploitLineDashWidth,
          exploitLineDashGap
        ],
        id: nodeA.color + nodeA.index + ' to ' + nodeB.color + nodeB.index + ' My Exploit Link'
      });

      theirExploitLine = new Konva.Line({
        points: [
          nodeAPosition.x - perpendicular.x,
          nodeAPosition.y - perpendicular.y,
          nodeBPosition.x - perpendicular.x,
          nodeBPosition.y - perpendicular.y
        ],
        stroke: 'black',
        strokeWidth: exploitLinksStroke,
        lineCap: 'square',
        lineJoin: 'square',
        dash: [
          exploitLineDashWidth,
          exploitLineDashGap
        ],
        id: nodeA.color + nodeA.index + ' to ' + nodeB.color + nodeB.index + ' Their Exploit Link'
      });

      group.add(myExploitLine, theirExploitLine);
      linksGroup.add(group);

      group.on('mouseover', function () {
        document.body.style.cursor = 'pointer';
      });
      group.on('mouseout', function () {
        document.body.style.cursor = 'default';
      });
      group.on('click', function () {
        if ($scope.callbackFn) {
          $scope.$apply($scope.callbackFn({ nodeA: $scope.nodeA, nodeB: $scope.nodeB }));
        }
      });
    }

    // ----------------------------------------------------------------------------
    var doesCurrentPlayerHaveExploitLink = function() {
      return GameUtil.areLocationsLinked($scope.nodeA, $scope.nodeB, GameState.currentPlayerData.exploitLinks);
    }

    // ----------------------------------------------------------------------------
    var doesOtherPlayerHasExploitLink = function() {
      return GameUtil.areLocationsLinked($scope.nodeA, $scope.nodeB, GameState.currentPlayerData.scannedExploitLinks);
    }

    // ----------------------------------------------------------------------------
    // Stolen from here: https://stackoverflow.com/questions/133897/how-do-you-find-a-point-at-a-given-perpendicular-distance-from-a-line
    var getPerpendicularVector = function(x1, x2, y1, y2, length) {
      var dx = x1 - x2;
      var dy = y1 - y2;
      var dist = Math.sqrt(dx * dx + dy * dy);
      dx /= dist;
      dy /= dist;
      return { x: dy * length, y: -dx * length };
    }

    createKonvaObjects($scope.nodeA, $scope.nodeB);
    onGameStateChanged();
  }
  return {
    link: link,
    restrict: 'E',
    scope: {
      callbackFn: '&',
      nodeA: '=',
      nodeB: '='
    },
  }
});
